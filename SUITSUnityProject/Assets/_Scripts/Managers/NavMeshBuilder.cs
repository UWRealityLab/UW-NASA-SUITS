using System;
using UnityEngine;
using UnityEngine.AI;

/// <summary>
/// NavMeshSurface helper class that is used to attach the NavMeshSurface component to
/// the appropriate spatial mesh generated by ARMeshManager and update the NavMesh at runtime
/// </summary>
public class NavMeshBuilder : Singleton<NavMeshBuilder>
{
    [SerializeField] private float _navMeshUpdateFrequency = 15.0f;
    [SerializeField] private bool _visualizeWalkableArea = false;

    private NavMeshSurface _surface;
    private MeshFilter _meshFilter;

    private void Start()
    {
        _meshFilter = GetComponent<MeshFilter>();
        StateManager.OnAfterStateChanged += StateChanged;
        ReorganizeSpatialMesh();
    }

    private void OnDestroy()
    {
        StateManager.OnAfterStateChanged -= StateChanged;
    }

    private void StateChanged(State newState)
    {
        switch (newState)  // turn off navmesh builder when doing UIA and turn on for the other tasks
        {
            case State.Indoor:
                CancelInvoke();
                break;
            case State.Outdoor:
                InvokeRepeating("BuildNavMesh", 0.0f, _navMeshUpdateFrequency);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(newState), newState, null);
        }
    }

    /// <summary>
    /// Wrapper method that controls how to build the NavMesh
    /// </summary>
    private void BuildNavMesh()
    {
        // directly calls BuildNavMesh for now
        _surface.BuildNavMesh();
        if (_visualizeWalkableArea)
        {
            NavMeshTriangulation _meshData = NavMesh.CalculateTriangulation();
            Mesh mesh = new Mesh();
            mesh.vertices = _meshData.vertices;
            mesh.triangles = _meshData.indices;
            _meshFilter.mesh = mesh;
        }
    }

    /// <summary>
    /// Reorganize spatial mesh gameobjects and add NavMeshSurface component
    /// </summary>
    private void ReorganizeSpatialMesh()
    {
        GameObject spatialMesh = GameObject.Find("Trackables");
        spatialMesh.name = "spatialMesh";
        GameObject spatialMeshChild = GameObject.Find("Trackables");
        spatialMeshChild.name = "spatialMeshChild";
        spatialMeshChild.transform.SetParent(spatialMesh.transform);
        _surface = spatialMesh.AddComponent<NavMeshSurface>();
        _surface.useGeometry = NavMeshCollectGeometry.PhysicsColliders;
        _surface.collectObjects = CollectObjects.Children;
    }
}